<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ESPnet基础理论(一)总览</title>
    <link href="/2022/04/17/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/"/>
    <url>/2022/04/17/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<p>这是我2021年9月份做的一次组会报告，不知道咋上传ppt，因此以图片上传上来，基本概括了ESPnet涉及到的最基础的理论知识吧，后面我有时间将会将涉及到的CTC、RNNT、Attention等逐一进行讲解，有时间的话，还有一些最新的端到端语音识别知识，比如语言模型的融合，这是最近在看的东西，当然得我学会还有时间才会写啊。</p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%871.PNG" alt="幻灯片1"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%872.PNG" alt="幻灯片2"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%873.PNG" alt="幻灯片3"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%874.PNG" alt="幻灯片4"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%875.PNG" alt="幻灯片5"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%876.PNG" alt="幻灯片6"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%877.PNG" alt="幻灯片7"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%878.PNG" alt="幻灯片8"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%879.PNG" alt="幻灯片9"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8710.PNG" alt="幻灯片10"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8711.PNG" alt="幻灯片11"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8712.PNG" alt="幻灯片12"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8713.PNG" alt="幻灯片13"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8714.PNG" alt="幻灯片14"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8715.PNG" alt="幻灯片15"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8716.PNG" alt="幻灯片16"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8717.PNG" alt="幻灯片17"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8718.PNG" alt="幻灯片18"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8719.PNG" alt="幻灯片19"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8720.PNG" alt="幻灯片20"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8721.PNG" alt="幻灯片21"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8722.PNG" alt="幻灯片22"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8723.PNG" alt="幻灯片23"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8724.PNG" alt="幻灯片24"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8725.PNG" alt="幻灯片25"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8726.PNG" alt="幻灯片26"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8727.PNG" alt="幻灯片27"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8728.PNG" alt="幻灯片28"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8729.PNG" alt="幻灯片29"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8730.PNG" alt="幻灯片30"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8731.PNG" alt="幻灯片31"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8732.PNG" alt="幻灯片32"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8734.PNG"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8735.PNG" alt="幻灯片35"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8736.PNG" alt="幻灯片36"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8737.PNG" alt="幻灯片37"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8738.PNG" alt="幻灯片38"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8739.PNG" alt="幻灯片39"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8740.PNG" alt="幻灯片40"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/%E5%B9%BB%E7%81%AF%E7%89%8741.PNG" alt="幻灯片41"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/image-20220417105606361.png" alt="image-20220417105606361"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/image-20220417105621606.png" alt="image-20220417105621606"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/image-20220417105635386.png" alt="image-20220417105635386"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/image-20220417105651683.png" alt="image-20220417105651683"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/image-20220417105705448.png" alt="image-20220417105705448"></p><p><img src="/../images/ESPnet%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-%E4%B8%80-%E6%80%BB%E8%A7%88/image-20220417105717563.png" alt="image-20220417105717563"></p>]]></content>
    
    
    <categories>
      
      <category>ESPnet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESPnet</tag>
      
      <tag>End-to-End</tag>
      
      <tag>CTC/Attention</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kaldi学习笔记（三）生成L.fst</title>
    <link href="/2022/04/14/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E7%94%9F%E6%88%90L-fst/"/>
    <url>/2022/04/14/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E7%94%9F%E6%88%90L-fst/</url>
    
    <content type="html"><![CDATA[<p>kaldi项目新路径：kaldi&#x2F;egs&#x2F;xuexi&#x2F;s5</p><p>L.fst是lexicon的WFST格式，L_disambig.fst引入了消歧符号。L.fst的输入音素序列，输出词序列。在这假设大家已经知道WFST,下面我们用一个小lexicon.txt来演示怎么生成L.fst等，词典放在data&#x2F;local&#x2F;dict下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs plain">(base) [lsy@small dict]$ cat lexicon.txt <br>SIL sil <br>&lt;SPOKEN_NOISE&gt; sil<br>你 n i3<br>的 d e5<br>原谅 vv van2 l iang4<br>也许 ii ie3 x v3<br>现在 x ian4 z ai4<br>如果 r u2 g uo3<br>认识 r en4 sh ix5<br>会 h ui4<br></code></pre></td></tr></table></figure><p>依靠这个字典我们准备以下文件：<br>nonsilence_phones.txt：语言直接相关的真实音素，同一行的音素是某一个音素的不同变体（重音、音调方面），故可共享决策树根，用的aishell的脚本；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">(base) [lsy@small dict]$ cat lexicon.txt |awk &#x27;&#123; for(n=2;n&lt;=NF;n++)&#123; phones[$n] = 1; &#125;&#125; END&#123;for (p in phones) print p;&#125;&#x27;| perl -e &#x27;while(&lt;&gt;)&#123; chomp($_); $phone = $_; next if ($phone eq &quot;sil&quot;);<br>   m:^([^\d]+)(\d*)$: || die &quot;Bad phone $_&quot;; $q&#123;$1&#125; .= &quot;$phone &quot;; &#125;<br>   foreach $l (values %q) &#123;print &quot;$l\n&quot;;&#125;<br>&#x27;| sort -k1 &gt; nonsilence_phones.txt<br></code></pre></td></tr></table></figure><p>silence_phones.txt：静音类音素<br>optional_silence.txt：备用的静音类音素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">(base) [lsy@small dict]$ echo sil &gt; silence_phones.txt<br>(base) [lsy@small dict]$ echo sil &gt; optional_silence.txt<br></code></pre></td></tr></table></figure><p> extra_questions.txt：同一行的音素有着相同的重音或音调，与GMM训练中自动生成的“questions”一同用于决策树的生成。</p><p><img src="/../images/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E7%94%9F%E6%88%90L-fst/image%20(16).png" alt="image (16)"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">(base) [lsy@small dict]$ cat silence_phones.txt &gt; extra_questions.txt <br>(base) [lsy@small dict]$ cat nonsilence_phones.txt | perl -e &#x27;while(&lt;&gt;)&#123; foreach $p (split(&quot; &quot;, $_)) &#123;<br>  $p =~ m:^([^\d]+)(\d*)$: || die &quot;Bad phone $_&quot;; $q&#123;$2&#125; .= &quot;$p &quot;; &#125; &#125; foreach $l (values %q) &#123;print &quot;$l\n&quot;;&#125;&#x27;  &gt;&gt; extra_questions.txt<br></code></pre></td></tr></table></figure><p>这时候我们dict就准备好了，返回s5目录，下一步我们使用perpare_lang.sh来生成L.fst</p><p>首先连接wsj的steps和utils</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">(base) [lsy@small s5]$ ln -s ~/kaldi/egs/wsj/s5/steps/ ./<br>(base) [lsy@small s5]$ ln -s ~/kaldi/egs/wsj/s5/utils/ ./<br></code></pre></td></tr></table></figure><p>然后使用perpare_lang.sh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">(base) [lsy@small s5]$ utils/prepare_lang.sh data/local/dict &quot;&lt;SPOKEN_NOISE&gt;&quot; data/local/lang data/lang<br></code></pre></td></tr></table></figure><p>这时候我们来看以下data&#x2F;lang文件夹下生成的东西</p><p><img src="/../images/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E7%94%9F%E6%88%90L-fst/image%20(17).png" alt="image (17)"></p><p>我们可以通过fstprint和fstdraw进行可视化L.fst</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">(base) [lsy@small lang]$ ~/kaldi/tools/openfst/bin/fstprint L.fst &gt; L_print.txt<br>(base) [lsy@small lang]$ ~/kaldi/tools/openfst/bin/fstprint --isymbols=phones.txt --osymbols=words.txt L.fst &gt; L_print1.txt<br></code></pre></td></tr></table></figure><p>一般我们用第二行命令进行可视化</p><p><img src="/../images/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E7%94%9F%E6%88%90L-fst/image%20(18).png" alt="image (18)"></p><p>这个图的意思：</p><p>第16行只有一列，说明状态1是终止状态，并且没有权重。其余的都是5列，第一列是起点状态id，第二列是终点状态id，第三列是输入符号，第四列是输出符号，第五列是weight。因此第一行表示的边为：从状态0到1的边，输入是&lt;eps&gt;，输出是&lt;eps&gt;，权重为0.69314。这个WFST的初始状态是什么呢？OpenFst约定第一行的起点就是初始状态。</p><p>因此我们可以依靠此表将WFST画出来</p><p>现在再我们使用下面两行命令用fstdraw来进行可视化（因为这个词典太小可以可视化出来，一般这个命令没法用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">(base) [lsy@small lang]$ ~/kaldi/tools/openfst/bin/fstdraw --isymbols=phones.txt --osymbols=words.txt L.fst &gt; L.dot<br>(base) [lsy@small lang]$ dot -Tjpg L.dot &gt; L.jpg<br></code></pre></td></tr></table></figure><p><img src="/../images/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E7%94%9F%E6%88%90L-fst/L%20(2)%20(1).jpg" alt="L (2) (1)"></p><p>我们现在来看一下lang文件夹下面的其他文件。</p><p>1.phones.txt，将所有音素一一映射为自然数，即音素 ID，引入“<eps>”（epsilon）、消歧（Disambiguation）符号“#n”（n 为自然数）， 便于 FST 处理。</p><p>第一列为音素，第二列为映射的自然素，可以看到总共122个音素，<eps>代表空，因为加了位置相关，B为音素在开头的意思，E为结尾，I为中间，S为单独一个，例如”SIL sil“就是单独的，”也许 ii ie3 x v3“ii就是开头的B， ie3和x就是中间I，v3就是结尾的E，后面都是要统计的。</p><p><img src="/../images/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E7%94%9F%E6%88%90L-fst/image%20(19).png" alt="image (19)"></p><p><img src="/../images/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E7%94%9F%E6%88%90L-fst/image%20(20).png" alt="image (20)"></p><p>2.words.txt，将词一一映射为自然数，即词ID，引入“<eps>”（epsilon）、消歧符号 “#0”、“<s>”（句子起始处）、“</s>”（句子结尾处），便于 FST 处理；</p><p><img src="/../images/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E7%94%9F%E6%88%90L-fst/image%20(21).png" alt="image (21)"></p><p>3.oov.txt，oov.int，集外词的替代者（此处为）及其在words.txt 中的ID；</p><p><img src="/../images/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E7%94%9F%E6%88%90L-fst/image%20(22).png" alt="image (22)"></p><p>oov.txt就是如果出现界外词，就用oov.txt中的词代替。</p><p>4.topo，各个音素HMM模型的拓扑图，通过将一个音素（或三音素）表示成一个HMM，此文件确定了每个音素使用的HMM状态数以及转移概率，用于初始化单音素GMM-HMM，可根据需要自行进行修改（并用utils&#x2F;validate_lang.pl校验），实验中静音音素用了5个状态，其他音素用了3个状态；</p><p><img src="/../images/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E7%94%9F%E6%88%90L-fst/image%20(23).png" alt="image (23)"></p><p>6-117是非静音音素，1-5为静音音素</p><p>5.phones&#x2F;，是dict&#x2F; 的拓展，内部文件均可以文本形式打开查看，后缀为 txt&#x2F;int&#x2F;csl 的同名文件之间是相互转换的，其中 context_indep.txt 标明了上下文无关建模的音素，通常为静音音素， wdisambig.txt&#x2F;wdisambig_phones.int&#x2F;wdisambig_words.int 分别标明了words.txt 引入的消歧符号（#0）及其在phones.txt 和words.txt 中的ID， roots.txt 定义了同一行音素的各个状态是否共享决策树的根以及是否拆分，对应的音素集则存放于sets.txt。</p><p>消歧是为了确保发音词典能够得到一个确定性的（Deterministic） WFST。 如果有些词对应的音素串是另一些词音素串的前缀，比如 good 的音素串是 goodness 的前半段音素串，需要在前者对应的音素串后面加入消歧音素，破坏这种前缀关系，这样， WFST 中一个词的路径就不会包含于另一个词的路径中。</p><p>未完待续。。。</p>]]></content>
    
    
    <categories>
      
      <category>kaldi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kaldi</tag>
      
      <tag>L.fst</tag>
      
      <tag>WFST</tag>
      
      <tag>lexicon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kaldi学习笔记（五）特征提取</title>
    <link href="/2022/04/14/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    <url>/2022/04/14/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>语音识别的第一步就是特征提取了，本文主要讲述如何根据音频信号提取MFCC和FBank特征（还有PLP，做孤立词识别用过，但没深究），这两种特征也是目前语音识别中使用最广泛的特征了。目前还有wav2vec也可以做特征提取，在无监督语音识别效果不错。</p><p>语音产生的过程：肺部呼出气体，然后通过声门的开启与闭合产生的周期信号，再通过声道产生声音，因为声道的不同，产生的声音也不同，比如拼音a、o、zi，三个声韵母，你会发现你的口型和牙齿的变化是不同的（可以看看<a href="http://ocw.aca.ntu.edu.tw/ntu-ocw/ocw/cou/104S204/2">台大李琳山老师</a>的课）。而人类的语音信号大部分是在10000Hz以下，我们常使用的麦克风进行音频录制的采样率为16000Hz，一个采样点使用16bit来存储。</p><h3 id="MFCC特征提取步骤"><a href="#MFCC特征提取步骤" class="headerlink" title="MFCC特征提取步骤"></a>MFCC特征提取步骤</h3><p><img src="/../images/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/2020_06_11_21_39_l6gHLo8NUjVt2iP.jpg" alt="2020_06_11_21_39_l6gHLo8NUjVt2iP"></p><h4 id="1-预加重"><a href="#1-预加重" class="headerlink" title="1.预加重"></a>1.预加重</h4><p>将语音信号通过一个预加重函数：</p><p>$$H(Z)&#x3D;1-\mu z^{-1}$$,式中u的值介于0.9-1.0之间，通常取0.97。预加重的目的是提升高频部分，使信号的频谱变得平坦，保持在低频到高频的整个频带中，能用同样的信噪比求频谱。这是因为很多声音在高频的地方会变得很微弱，通过这个方法，这只是实验性的方法，因为worker，所有大家都用。</p><h4 id="2-分帧"><a href="#2-分帧" class="headerlink" title="2.分帧"></a>2.分帧</h4><p>语音信号是一个非稳态、时变的信号，但是在极短的时间范围内，我们可以把语音认为是一个稳态、时不变的信号。这个极短时间范围通常分为20-40ms的帧，一般分成25ms为一帧。为了保证帧与帧之间平滑过渡，保持其连续性，分帧一般会让相邻的帧有重叠部分，因此每次只会移动10ms(而不是25ms)，这10ms我们称之为帧移。对于语音信号的采样频率是16kHz的，那么一帧就有16000*25&#x2F;1000&#x3D;400个样本点，帧移有16000 * 0.01 &#x3D; 160 个样本点，如果最后一帧不够400个样本点，我们一般在后面补0。对于一段语音如果有n个点，可以得到(n-400)&#x2F;160+1帧数据。</p><h4 id="3-加窗"><a href="#3-加窗" class="headerlink" title="3.加窗"></a>3.加窗</h4><p>首先一个基础：时域的乘积等于频域的卷积</p><p>因为后面要做FFT，我们不可能对所有时间做FFT，只能对短时长度的信号做FFT，因此我们只能在整段语音上截取一小段进行FFT。我们人为已经对这个无限长序列加了一个矩形窗，也就是这个无限长序列的频谱已经和一个矩形窗函数的频谱做了卷积了。这时候卷积可不是相乘，自然输出的这个有限长序列输出的频谱就变形了。</p><p>我们对一段信号进行分帧处理的时候，频谱泄漏会影响分析，所以才会用到窗函数，而经过窗函数处理的时域信号，其初始点和结束点的时域振幅都接近0。</p><p>在语音识别上主要用的是”汉明窗“。它能使信号在窗边界的值近似为 0，从而使得信号趋近于是一个周期信号，一个完整的有限长周期函数可以代表一个无限长周期函数，因此周期函数不会造成频谱泄露，该窗函数如下：$$w[n]&#x3D;0.54-0.46cos(\frac{2\pi n}{L}); 0\leq n \leq L-1$$，其他情况等于0。</p><h4 id="注意：以下为对每一个窗口进行的操作"><a href="#注意：以下为对每一个窗口进行的操作" class="headerlink" title="注意：以下为对每一个窗口进行的操作"></a>注意：以下为对每一个窗口进行的操作</h4><h4 id="4-离散傅里叶变换"><a href="#4-离散傅里叶变换" class="headerlink" title="4.离散傅里叶变换"></a>4.离散傅里叶变换</h4><p>DFT,将每个窗口内的数据从时域信号转为频域信号。DFT 的变换公式如下：</p><p>$$X(m)&#x3D;\sum_{n&#x3D;0}^{N-1}{x(n)h(n)e^{-j2\pi nm&#x2F;N}}$$</p><p>x(n) 是窗口中每个数据点的值，h(n)是一个数据点的窗函数，m是DFT的长度，e 是自然底数。有了X[m]我们就能估计功率谱：$$P_i(k)&#x3D;\frac{1}{N}|X_i(m)|^2$$</p><p>上式得到的是周期图的功率谱估计。通常我们会进行512点的DFT,并且因为对称性只保留前257（第一个点是直流分量）个系数。在实际中使用的一般是快速傅里叶变换（FFT，大家可以自行了解）。</p><h4 id="5-梅尔滤波器组"><a href="#5-梅尔滤波器组" class="headerlink" title="5.梅尔滤波器组"></a>5.梅尔滤波器组</h4><p>这个办法就是想要学人的耳朵怎么听语音的，研究人员发现听觉神经单元听到的是一堆频率而不是一个频率，而听觉神经是会听的重叠的，还有一个问题就是人耳对不同频率语音有不同的感知能力：对低频部分，与频率成线性关系；对高频部分，频率间隔越变越大。</p><p>因此研究人员想的一个办法就是用三角形滤波器来代替人耳神经单元，类似如下图所示：</p><p><img src="/../images/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/20191023222025495.png" alt="20191023222025495"></p><p>这是一组大约20-40（通常26）个三角滤波器组，它会对上一步得到的周期图的功率谱估计进行滤波，每个滤波器组由26个(滤波器)长度为257的向量组成，每个滤波器的257个值中大部分都是0，只有对于需要采集的频率范围才是非零。输入的257点的信号会通过26个滤波器，我们会计算通过每个滤波器的信号的能量。</p><p>对于重叠部分的问题，解决办法是将两个三角形按上图所示叠放在一起，上一个滤波器的中间频率作为下一个滤波器的开始频率。</p><p>对于不同频率感知不同，就是将频率Hz转换成Mel频率来解决，转换公式如下：</p><p>$$m&#x3D;2595log_{10}(1+\frac{f}{700})$$</p><p><img src="/../images/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/2020_06_11_21_40_mel.png" alt="2020_06_11_21_40_mel"></p><p>上图为Hz频率到Mel频率的转换。因此越到后面一个Mel滤波器对应的Hz频率越大，特性就是低频密，高频疏。</p><h4 id="6-能量取log"><a href="#6-能量取log" class="headerlink" title="6.能量取log"></a>6.能量取log</h4><p>字面意思，如果是40个滤波器，就对40个能量取log。也就得到了40维的Fbank特征。</p><p>为什么要取log:将在下一节介绍。</p><h4 id="7-IDFT"><a href="#7-IDFT" class="headerlink" title="7.IDFT"></a>7.IDFT</h4><p>FBank 特征的频谱图大概长下面这个样子，图中四个红点表示的是共振峰，是频谱图的主要频率，在语音识别中，根据共振峰来区分不同的音素（phone），所以我们可以把图中红线表示的特征提取出来就行，移除蓝色的影响部分。其中红色平滑曲线将各个共振峰连接起来，这条红线，称为谱包络（Spectral Envelope），蓝色上下震荡比较多的线条称为谱细节（Spectral details）。</p><p><img src="/../images/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/2020_06_11_21_41_image-20200607174357596.png" alt="2020_06_11_21_41_image-20200607174357596"></p><p>首先，开头我们就讲了语音的产生可以理解为呼出的气通过声带振动E(w)，然后经过腔体（包括舌头、牙齿等等）H(w)，形成各种不同的发音X(w)。其中声带产生的频谱E(w)是很简单的，主要就是腔体决定着各个音素的频谱。所以如果我们知道腔体的信息，就可以准确的对音素进行描述。显然的，腔体的形状对应着上面图中的谱包络(红色的线)，揭示了共振峰的走向。</p><p>现在我们希望获得这个红色的线，但是这个红色的线被蓝色的线干扰的很厉害，我们要怎么把蓝色的线除掉，要怎么去掉呢：</p><p>在时间轴上我们的语音可以看作：$$X[w]&#x3D;E[w]*H[w]$$</p><p>将原来的语音经过傅里叶变换得到的频谱：$$X[w]&#x3D;E[w]H[w]$$</p><p>因为phase信息对语音识别来说没用，因此只考虑幅度就是：$$|X[w]|&#x3D;|E[w]||H[w]|$$</p><p>两边取log：$$log|X[w]|&#x3D;log|E[w]|+log|H[w]|$$</p><p>再在两边取逆傅里叶变换得到：$$X[w]&#x3D;E[w]+H[w]$$</p><p>log运算是为了分别包络和细节，包络代表音色，细节代表音高，显然语音识别就是为了识别音色。另外，人的感知与频率的对数成正比，正好使用log模拟，这就是取log的原因。</p><p>尽管现在E[w]+H[w]也就是包络和细节还是混在一起的，但是现在有一点不同，因为包络变化很慢，而细节变化很快，因此包络几乎在前面，而细节几乎再后面，所以我们如果在一个地方切开它，几乎就可以得到包络了，如下图所示。</p><p><img src="/../images/kaldi%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/image%20(15).png" alt="image (15)"></p><p>一般来说IDFT用的是DCT(离散余弦变换)，因为DCT具有去相关性，这时我们得到40维倒谱系数，最后我们保留2-13这个12维，这12维就叫MFCC特征。对功率谱再做DCT的目的就是为了提取信号的包络。</p><h4 id="8-Deltas和Delta-Deltas特征"><a href="#8-Deltas和Delta-Deltas特征" class="headerlink" title="8.Deltas和Delta-Deltas特征"></a>8.Deltas和Delta-Deltas特征</h4><p>Deltas和Delta-Deltas通常也叫(一阶)差分系数和二阶差分(加速度)系数。MFCC特征向量描述了一帧语音信号的功率谱的包络信息，但是语音识别也需要帧之间的动态变化信息，比如MFCC随时间的轨迹，实际证明把MFCC的轨迹变化加入后会提高识别的效果。因此我们可以用当前帧前后几帧的信息来计算Delta和Delta-Delta：</p><p>$$d_t&#x3D;\frac{\sum_{n&#x3D;1}^{N}{n(c_{t+n}-c_{t-n})}}{2\sum_{n&#x3D;1}^{N}{n^2}}$$</p><p>上式得到的dt是Delta系数，计算第t帧的Delta需要t-N到t+N的系数，N通常是2。如果对Delta系数dt再使用上述公式就可以得到Delta-Delta系数，这样我们就可以得到3*12&#x3D;36维的特征。上面也提到过，我们通常把能量也加到12维的特征里，对能量也可以计算一阶和二阶差分，这样最终可以得到39维的MFCC特征向量。</p><p>完成前面步骤后就是特征提取了，先看一下aishell脚本特征提取的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs plain">mfccdir=mfcc<br>for x in train dev test; do<br>  steps/make_mfcc_pitch.sh --cmd &quot;$train_cmd&quot; --nj 10 data/$x exp/make_mfcc/$x $mfccdir || exit 1;<br>  steps/compute_cmvn_stats.sh data/$x exp/make_mfcc/$x $mfccdir || exit 1;<br>  utils/fix_data_dir.sh data/$x || exit 1;<br>done<br></code></pre></td></tr></table></figure><p>未完待续。。。</p>]]></content>
    
    
    <categories>
      
      <category>kaldi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kaldi</tag>
      
      <tag>mfcc</tag>
      
      <tag>特征提取</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于kaldi+GStreamer搭建web版实时语音识别系统</title>
    <link href="/2022/04/13/%E5%9F%BA%E4%BA%8Ekaldi-GStreamer%E6%90%AD%E5%BB%BAweb%E7%89%88%E5%AE%9E%E6%97%B6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/04/13/%E5%9F%BA%E4%BA%8Ekaldi-GStreamer%E6%90%AD%E5%BB%BAweb%E7%89%88%E5%AE%9E%E6%97%B6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>本文将会主要介绍怎么结合kaldi语音识别工具和两个GStreamer插件件(<a href="https://github.com/alumae/gst-kaldi-nnet2-online">gst­-kaldi­-nnet2­-online</a>、<a href="https://github.com/alumae/kaldi-gstreamer-server">kaldi­-gstreamer-server</a>)以及<a href="https://github.com/sendream/dictate.js">dictate.js</a>来搭建线上的实时语音识别系统。</p><p>本人配置环境：腾讯云服务器、ubuntu 18.04。</p><h2 id="一-kaldi"><a href="#一-kaldi" class="headerlink" title="一.kaldi"></a>一.kaldi</h2><p>Kaldi是当前最流行的开源语音识别工具(Toolkit)，它使用WFST来实现解码算法。Kaldi的主要代码是C++编写，在此之上使用bash和python脚本做了一些工具。而实时识别系统的好坏取决于语音识别的性能，语音识别包含特征提取、声学模型、语言模型、解码器等部分。Kaldi工具箱集成了几乎所有搭建语音识别器需要用到的工具。因不涉及GPU的使用，因此不用配置CUDA。kaldi的训练我将再另外一个专栏进行介绍。</p><h4 id="1-kaldi安装"><a href="#1-kaldi安装" class="headerlink" title="1.kaldi安装"></a><strong>1.kaldi安装</strong></h4><p>1.下载kaldi最新文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs plain">git clone https://github.com/kaldi-asr/kaldi.git<br></code></pre></td></tr></table></figure><p>2.安装kaldi，首先进入tools目录下，检查依赖性，没有的包按照指令安装，详细过程参见tools目录下的INSTALL文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd kaldi-trunk/tools<br>cat INSTALL<br>#查看安装教程<br>extras/check_dependencies.sh<br>#检查依赖性，没有的包按照指令安装<br>make  or  make -j 4(多线程加快进度）<br></code></pre></td></tr></table></figure><p>3.编译kaldi源文件，详细过程参见src目录下的INSTALL文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd ../src<br>cat INSTALL<br>#查看安装教程<br>./configure --shared<br>make depend -8<br>make -8<br></code></pre></td></tr></table></figure><p>安装过程遇上问题，需要停止安装并按照提示检查错误并解决错误，<a href="http://kaldi-asr.org/doc/build_setup.html">此处</a>为kaldi官方文档的编译过程。（我遇到的问题GCC版本太低）<br>4.检查是否安装成功</p><p>跑一个例子yesno</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd ../egs/yesno/s5<br>./run.sh<br></code></pre></td></tr></table></figure><p>输出显示<br><img src="/../images/%E5%9F%BA%E4%BA%8Ekaldi-GStreamer%E6%90%AD%E5%BB%BAweb%E7%89%88%E5%AE%9E%E6%97%B6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F/image%20(6).png" alt="image (6)"></p><p>表示安装成功</p><h4 id="2-模型的训练"><a href="#2-模型的训练" class="headerlink" title="2.模型的训练"></a>2.模型的训练</h4><p>模型训练将在kaldi专栏中进行介绍。本文将基于nnet3模型搭建实时语音识别系统，gst-kaldi-nnet-online插件需要的文件包括：final.mdl，frame_subsampling_factor，HCLG.fst，phones.txt，tree，words.txt；conf文件包括：ivector_extractor.conf，mfcc.conf，  online_cmvn.conf，online.conf，pitch.conf（如果使用音高），splice.conf；ivector_extractor文件包括：final.dubm，final.ie，final.mat，global_cmvn.stats，online_cmvn.conf，splice_opts。有了上面这些文件，我们就可以基于gst-kaldi-nnet-online插件搭建实时语音识别了，再结合kaldi­-gstreamer­-server和<a href="https://github.com/sendream/dictate.js">dictate.js</a>就可以实现web端语音识别系统。</p><h2 id="二-GStreamer插件"><a href="#二-GStreamer插件" class="headerlink" title="二.GStreamer插件"></a>二.GStreamer插件</h2><h4 id="1-安装gst-kaldi-nnet-online插件"><a href="#1-安装gst-kaldi-nnet-online插件" class="headerlink" title="1.安装gst-kaldi-nnet-online插件"></a>1.安装gst-kaldi-nnet-online插件</h4><p>首先安装gstreamer-1.0：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo apt-get install gstreamer1.0-plugins-bad  gstreamer1.0-plugins-base gstreamer1.0-plugins-good  gstreamer1.0-pulseaudio  gstreamer1.0-plugins-ugly  gstreamer1.0-tools libgstreamer1.0-dev<br></code></pre></td></tr></table></figure><p>Ubuntu14.04版本以下，在执行上述sudo apt-get install之前，需要使用backport ppa来获取gstreamer的1.0版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo add-apt-repository ppa:gstreamer-developers/ppa<br>sudo apt-get update<br></code></pre></td></tr></table></figure><p>接下来就是安装 Jansson 库开发包（2.7 或更高版本），用于将结果编码为 JSON：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo apt-get install libjansson-dev<br></code></pre></td></tr></table></figure><p>接下来就是编译安装gst-kaldi-nnet-online插件了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">git clone https://github.com/alumae/gst­kaldi­nnet2­online.git<br>#如果无法下载就自己去github下载上传到服务器<br>cd gst-kaldi-nnet2-online/src<br>KALDI_ROOT=/path/of/kaldi-trunk make depend<br>KALDI_ROOT=/path/of/kaldi-trunk make<br>#编译指定kaldi的根目录<br></code></pre></td></tr></table></figure><p>整个编译如果没有出现错误，那么应该会在src目录下产生libgstkaldinnet2onlinedecoder.so<br><img src="/../images/%E5%9F%BA%E4%BA%8Ekaldi-GStreamer%E6%90%AD%E5%BB%BAweb%E7%89%88%E5%AE%9E%E6%97%B6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F/image%20(7).png" alt="image (7)"></p><p>设置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">vim ~/.bashrc<br>#按GG到最后一行插入下面这行命令<br>export GST_PLUGIN_PATH=your gst­kaldi­nnet2­online installation directory/src<br></code></pre></td></tr></table></figure><p>测试GStreamer 是否可以访问插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">GST_PLUGIN_PATH=. gst-inspect-1.0 kaldinnet2onlinedecoder<br></code></pre></td></tr></table></figure><p>输出应列出所有插件属性及其默认值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plain">Factory Details:<br>  Rank                     none (0)<br>  Long-name                KaldiNNet2OnlineDecoder<br>  Klass                    Speech/Audio<br>  Description              Convert speech to text<br>[...]<br>  name                : The name of the object<br>                        flags: readable, writable<br>                        String. Default: &quot;kaldinnet2onlinedecoder0&quot;<br>  parent              : The parent of the object<br>                        flags: readable, writable<br>                        Object of type &quot;GstObject&quot;<br>  silent              : Silence the decoder<br>                        flags: readable, writable<br>                        Boolean. Default: false<br>  model               : Filename of the acoustic model<br>                        flags: readable, writable<br>                        String. Default: &quot;models/final.mdl&quot;<br>[...]<br>  max-nnet-batch-size : Maximum batch size we use in neural-network decodable object, in cases where we are not constrained by currently available frames (this will rarely make a difference)<br>                        flags: readable, writable<br>                        Integer. Range: -2147483648 - 2147483647 Default: 256<br><br>Element Signals:<br>  &quot;partial-result&quot; :  void user_function (GstElement* object,<br>                                          gchararray arg0,<br>                                          gpointer user_data);<br>  &quot;final-result&quot; :  void user_function (GstElement* object,<br>                                        gchararray arg0,<br>                                        gpointer user_data);<br></code></pre></td></tr></table></figure><h4 id="2-测试语音识别系统"><a href="#2-测试语音识别系统" class="headerlink" title="2.测试语音识别系统"></a>2.测试语音识别系统</h4><p>安装完gst-kaldi-nnet-online插件后，配合kaldi语音识别工具箱，就可以实现实时语音识别了，在demo提供了两个案例，下面将详细介绍这两个案例。</p><p>1.案例一</p><p>首先要下载基于DNN的英语模型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd demo<br>./prepare-models.sh<br></code></pre></td></tr></table></figure><p>将会下载三个文件夹models、conf、ivector_extractor：<br>![image (8)](..&#x2F;images&#x2F;基于kaldi-GStreamer搭建web版实时语音识别系统&#x2F;image (8).png)</p><p><img src="/../images/%E5%9F%BA%E4%BA%8Ekaldi-GStreamer%E6%90%AD%E5%BB%BAweb%E7%89%88%E5%AE%9E%E6%97%B6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F/IMG_20220404_105214020.jpg" alt="IMG_20220404_105214020"></p><p><img src="/../images/%E5%9F%BA%E4%BA%8Ekaldi-GStreamer%E6%90%AD%E5%BB%BAweb%E7%89%88%E5%AE%9E%E6%97%B6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F/image%20(9).png" alt="image (9)"></p><p>有了以上文件后，直接运行transcribe­audio.sh这个脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">./transcribe-audio.sh dr_strangelove.mp3<br></code></pre></td></tr></table></figure><p>得到以下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">LOG ([5.5.201~1-36f6d]:ComputeDerivedVars():ivector-extractor.cc:183) Computing derived variables for iVector extractor<br>LOG ([5.5.201~1-36f6d]:ComputeDerivedVars():ivector-extractor.cc:204) Done.<br>huh i hello this is hello dimitri listen i i can&#x27;t hear too well do you support you could turn the music down just a little<br>ha ha that&#x27;s much better yet not yet<br>...<br></code></pre></td></tr></table></figure><p>查看transcribe-audio.sh可以看出怎么配置gst-kaldi-nnet2-online,因为后面­kaldi-gstreamer-­server会涉及到，以下是该脚本核心配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plain">GST_PLUGIN_PATH=../src gst-launch-1.0 --gst-debug=&quot;&quot; -q filesrc location=$audio ! decodebin ! audioconvert ! audioresample ! \<br>kaldinnet2onlinedecoder \<br>  use-threaded-decoder=true \<br>  model=models/final.mdl \<br>  fst=models/HCLG.fst \<br>  word-syms=models/words.txt \<br>  phone-syms=models/phones.txt \<br>  word-boundary-file=models/word_boundary.int \<br>  num-nbest=3 \<br>  num-phone-alignment=3 \<br>  do-phone-alignment=true \<br>  feature-type=mfcc \<br>  mfcc-config=conf/mfcc.conf \<br>  ivector-extraction-config=conf/ivector_extractor.fixed.conf \<br>  max-active=7000 \<br>  beam=11.0 \<br>  lattice-beam=5.0 \<br>  do-endpointing=true \<br>  endpoint-silence-phones=&quot;1:2:3:4:5:6:7:8:9:10&quot; \<br>  chunk-length-in-secs=0.2 \<br>! filesink location=/dev/stdout buffer-mode=2<br></code></pre></td></tr></table></figure><p>小声哔哔1：在运行这步的时候出错了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">INTEL MKL ERROR: /opt/intel/mkl/lib/intel64/libmkl_avx2.so: undefined symbol: mkl_sparse_optimize_bsr_trsm_i8.<br>Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.<br></code></pre></td></tr></table></figure><p>出现上述错误貌似是MKL没有安装好，但是kaldi我能正常运行，我经过下述操作解决了该问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd ~/.bashrc<br>#(GG)跳到最后一行<br>export LD_PRELOAD=/opt/intel/mkl/lib/intel64/libmkl_def.so:/opt/intel/mkl/lib/intel64/libmkl_avx2.so:/opt/intel/mkl/lib/intel64/libmkl_core.so:/opt/intel/mkl/lib/intel64/libmkl_intel_lp64.so:/opt/intel/mkl/lib/intel64/libmkl_intel_thread.so:/opt/intel/lib/intel64_lin/libiomp5.so:/opt/intel/mkl/lib/intel64/libmkl_sequential.so<br>#本来只要添加两个，但是后面还有同类错误，所有全部添加了<br></code></pre></td></tr></table></figure><p>小声哔哔2：解决第一个问题后又出现问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">(base) ubuntu@VM-4-17-ubuntu:~/gst-kaldi-nnet2-online/demo$ ./transcribe-audio.sh dr_strangelove.mp3<br>LOG ([5.5.201~1-36f6d]:ComputeDerivedVars():ivector-extractor.cc:183) Computing derived variables for iVector extractor<br>LOG ([5.5.201~1-36f6d]:ComputeDerivedVars():ivector-extractor.cc:204) Done.<br>ERROR: from element /GstPipeline:pipeline0/GstDecodeBin:decodebin0: Your GStreamer installation is missing a plug-in.<br>Additional debug info:<br>gstdecodebin2.c(4640): gst_decode_bin_expose (): /GstPipeline:pipeline0/GstDecodeBin:decodebin0:<br>no suitable plugins found:<br>Missing decoder: ID3 tag (application/x-id3)<br><br>ERROR: pipeline doesn&#x27;t want to preroll.<br></code></pre></td></tr></table></figure><p>当时查了很多资料无法解决该问题，因为装了anaconda3，当时是在base环境下，后面conda deactivate该问题消失。<br>2.案例二</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">python2 gui-demo.py<br></code></pre></td></tr></table></figure><p>运行这个基本需要用python2，运行完成后将会弹出一个小框框，点击Speak按钮后开始实时语音识别。<br>在运行这个引入包的时候出错了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">from gi.repository import GObject, Gst, Gtk, Gdk<br></code></pre></td></tr></table></figure><p>解决方法忘了，自己解决吧。<br>以下是对gui-demo.py程序代码，注解参考<a href="https://github.com/mrjunjieli">李健</a>的热心分享</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs plain">#!/usr/bin/env python<br># <br># Copyright (c) 2013 Tanel Alumae<br># Copyright (c) 2008 Carnegie Mellon University.<br>#<br># Inspired by the CMU Sphinx&#x27;s Pocketsphinx Gstreamer plugin demo (which has BSD license)<br>#<br># Licence: BSD<br><br>import sys<br>import os<br>import gi<br>gi.require_version(&#x27;Gst&#x27;, &#x27;1.0&#x27;)#<br>from gi.repository import GObject, Gst, Gtk, Gdk<br>GObject.threads_init()<br>Gdk.threads_init()<br><br>Gst.init(None)<br><br>class DemoApp(object):<br>    &quot;&quot;&quot;GStreamer/Kaldi Demo Application&quot;&quot;&quot;<br>    def __init__(self):<br>        &quot;&quot;&quot;Initialize a DemoApp object&quot;&quot;&quot;<br>        self.init_gui()<br>    def init_gui(self):<br>        &quot;&quot;&quot;Initialize the GUI components&quot;&quot;&quot;<br>        self.window = Gtk.Window()<br>        self.window.set_border_width(10)<br>        vbox = Gtk.VBox()<br>        self.text = Gtk.TextView()<br>        self.textbuf = self.text.get_buffer()<br>        self.text.set_wrap_mode(Gtk.WrapMode.WORD)<br>        vbox.pack_start(self.text, True, True, 1)<br>        self.button = Gtk.Button(&quot;Speak&quot;)<br>        self.button.connect(&#x27;clicked&#x27;, self.button_clicked)<br>        vbox.pack_start(self.button, False, False, 5)<br>        self.window.add(vbox)<br>        self.window.show_all()<br><br>    def quit(self, window):<br>        Gtk.main_quit()<br><br>    def init_gst(self):<br>        &quot;&quot;&quot;Initialize the speech components&quot;&quot;&quot;<br>        self.pulsesrc = Gst.ElementFactory.make(&quot;pulsesrc&quot;, &quot;pulsesrc&quot;)<br>        if self.pulsesrc == None:<br>            sys.exit()<br>        self.audioconvert = Gst.ElementFactory.make(&quot;audioconvert&quot;, &quot;audioconvert&quot;)<br>        self.audioresample = Gst.ElementFactory.make(&quot;audioresample&quot;, &quot;audioresample&quot;)<br>        self.asr = Gst.ElementFactory.make(&quot;kaldinnet2onlinedecoder&quot;, &quot;asr&quot;)<br>        self.fakesink = Gst.ElementFactory.make(&quot;fakesink&quot;, &quot;fakesink&quot;)<br><br>        if self.asr:<br>          model_file = &quot;models/final.mdl&quot;<br>          if not os.path.isfile(model_file):<br>              print &gt;&gt; sys.stderr, &quot;Models not downloaded? Run prepare-models.sh first!&quot;<br>              sys.exit(1)<br>          self.asr.set_property(&quot;nnet-mode&quot;,3)<br>          self.asr.set_property(&quot;fst&quot;, &quot;models/HCLG.fst&quot;)<br>          self.asr.set_property(&quot;model&quot;, model_file)<br>          self.asr.set_property(&quot;word-syms&quot;, &quot;models/words.txt&quot;)<br>          self.asr.set_property(&quot;feature-type&quot;, &quot;mfcc&quot;)<br>          self.asr.set_property(&quot;mfcc-config&quot;, &quot;conf/mfcc.conf&quot;)<br>          self.asr.set_property(&quot;ivector-extraction-config&quot;, &quot;conf/ivector_extractor.fixed.conf&quot;)<br>          self.asr.set_property(&quot;max-active&quot;, 7000)<br>          self.asr.set_property(&quot;beam&quot;, 10.0)<br>          self.asr.set_property(&quot;lattice-beam&quot;, 6.0)<br>          self.asr.set_property(&quot;do-endpointing&quot;, True)<br>          self.asr.set_property(&quot;endpoint-silence-phones&quot;, &quot;1:2:3:4:5:6:7:8:9:10&quot;)<br>          self.asr.set_property(&quot;use-threaded-decoder&quot;, False)<br>          self.asr.set_property(&quot;chunk-length-in-secs&quot;, 0.2)<br>        else:<br>          print &gt;&gt; sys.stderr, &quot;Couldn&#x27;t create the kaldinnet2onlinedecoder element. &quot;<br>          if os.environ.has_key(&quot;GST_PLUGIN_PATH&quot;):<br>            print &gt;&gt; sys.stderr, &quot;Have you compiled the Kaldi GStreamer plugin?&quot;<br>          else:<br>            print &gt;&gt; sys.stderr, &quot;You probably need to set the GST_PLUGIN_PATH envoronment variable&quot;<br>            print &gt;&gt; sys.stderr, &quot;Try running: GST_PLUGIN_PATH=../src %s&quot; % sys.argv[0]<br>          sys.exit();<br><br>        # initially silence the decoder<br>        self.asr.set_property(&quot;silent&quot;, True)<br><br>        self.pipeline = Gst.Pipeline()<br>        for element in [self.pulsesrc, self.audioconvert, self.audioresample, self.asr, self.fakesink]:<br>            self.pipeline.add(element)<br>        self.pulsesrc.link(self.audioconvert)<br>        self.audioconvert.link(self.audioresample)<br>        self.audioresample.link(self.asr)<br>        self.asr.link(self.fakesink)<br><br>        self.asr.connect(&#x27;partial-result&#x27;, self._on_partial_result)<br>        self.asr.connect(&#x27;final-result&#x27;, self._on_final_result)<br>        self.pipeline.set_state(Gst.State.PLAYING)<br><br><br><br>    def _on_partial_result(self, asr, hyp):<br>        &quot;&quot;&quot;Delete any previous selection, insert text and select it.&quot;&quot;&quot;<br>        Gdk.threads_enter()<br>        # All this stuff appears as one single action<br>        self.textbuf.begin_user_action()<br>        self.textbuf.delete_selection(True, self.text.get_editable())<br>        self.textbuf.insert_at_cursor(hyp)<br>        ins = self.textbuf.get_insert()<br>        iter = self.textbuf.get_iter_at_mark(ins)<br>        iter.backward_chars(len(hyp))<br>        self.textbuf.move_mark(ins, iter)<br>        self.textbuf.end_user_action()<br>        Gdk.threads_leave()<br><br>    def _on_final_result(self, asr, hyp):<br>        Gdk.threads_enter()<br>        &quot;&quot;&quot;Insert the final result.&quot;&quot;&quot;<br>        # All this stuff appears as one single action<br>        self.textbuf.begin_user_action()<br>        self.textbuf.delete_selection(True, self.text.get_editable())<br>        self.textbuf.insert_at_cursor(hyp)<br>        if (len(hyp) &gt; 0):<br>            self.textbuf.insert_at_cursor(&quot; &quot;)<br>        self.textbuf.end_user_action()<br>        Gdk.threads_leave()<br><br><br><br>    def button_clicked(self, button):<br>        &quot;&quot;&quot;Handle button presses.&quot;&quot;&quot;<br>        if button.get_label() == &quot;Speak&quot;:<br>            button.set_label(&quot;Stop&quot;)<br>            self.asr.set_property(&quot;silent&quot;, False)<br>        else:<br>            button.set_label(&quot;Speak&quot;)<br>            self.asr.set_property(&quot;silent&quot;, True)<br><br><br><br>if __name__ == &#x27;__main__&#x27;:<br>  app = DemoApp()<br>  Gdk.threads_enter()<br>  Gtk.main()<br>  Gdk.threads_leave()<br><br></code></pre></td></tr></table></figure><h2 id="三-Kaldi­-gstreamer­-server插件"><a href="#三-Kaldi­-gstreamer­-server插件" class="headerlink" title="三.Kaldi­-gstreamer­-server插件"></a>三.Kaldi­-gstreamer­-server插件</h2><p>该插件下所有python脚本需用python2运行</p><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">#Tornado 4, 见 http://www.tornadoweb.org/en/stable/<br>#ws4py (0.3.0 .. 0.3.2)<br>#YAML<br>#JSON<br>sudo pip install tornado<br>sudo pip install ws4py==0.3.2<br>sudo pip install pyyaml<br></code></pre></td></tr></table></figure><p>测试是否满足所有依赖关系<br><img src="/../images/%E5%9F%BA%E4%BA%8Ekaldi-GStreamer%E6%90%AD%E5%BB%BAweb%E7%89%88%E5%AE%9E%E6%97%B6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F/image%20(10).png" alt="image (10)"></p><p>没有出现no module错误表示安装正确，出错缺啥装啥</p><h4 id="2-安装Kaldi­-gstreamer­-server插件"><a href="#2-安装Kaldi­-gstreamer­-server插件" class="headerlink" title="2.安装Kaldi­-gstreamer­-server插件"></a>2.安装Kaldi­-gstreamer­-server插件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd ~<br>#我安装在家目录下<br>git clone https://github.com/alumae/kaldi­gstreamer­server.git <br></code></pre></td></tr></table></figure><p>下载完成后即可使用。<br>kaldi­-gstreamer­-server&#x2F;kaldigstserver下存放的是核心程序。整个server包含两部分，第一个是master_server.py，master_server不进行语音识别，它的作用是接收和发送数据。第二个是worker.py，worker的作用是对接收的进行语音识别并发送识别结果。使用的是websocket全双工通信。因此识别流程是“客户端”发送数据到master_server，master_server将识别任务分配给worker(当有多个客户端请求时master_server可以把不同的任务分配给不同的worker)，worker接收数据识别后将识别结果传回master_server，master_server再将识别结果返回给客户端。</p><p>下面展示如何对实现识别语音识别：</p><h4 id="3-运行服务器"><a href="#3-运行服务器" class="headerlink" title="3.运行服务器"></a>3.运行服务器</h4><p>首先下载训练好的nnet2模型，用作测试使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd kaldi-gstreamer-server-master/test/models/<br>./download-multi_cn-nnet3.sh<br>cd ../..<br></code></pre></td></tr></table></figure><p>运行master server，端口号为8888（可以自己随意设置）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">python2 kaldigstserver/master_server.py --port=8888<br></code></pre></td></tr></table></figure><p>接下来开启worker,worker负责语音识别部分，worker可以使用两种解码器</p><p>第一种：onlinegmmdecodefasterGStreamer，支持GMM,安装教程如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd kaldi/src<br>make ext<br>cd tools<br>./install_portaudio.sh<br>vim ~/.bashrc<br>加入path/kaldi/tools/portaudio<br>sudo ldconfig<br>cd src/gst-plugin/<br>KALDI_ROOT=/path/of/kaldi make depend<br>KALDI_ROOT=/path/of/kaldi make<br>然后会在src/gst-plugin中看到libgstonlinegmmdecodefaster.so<br>export GST_PLUGIN_PATH=pathkaldi/src/gst-plugin (可以把这个目录写入~/.bashrc中)<br>gst-inspect-1.0 onlinegmmdecodefaster<br></code></pre></td></tr></table></figure><p>我们使用的是第二种较新的kaldinnet2onlinedecoder插件，支持DNN模型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">python2 kaldigstserver/worker.py -u ws://localhost:8888/worker/ws/speech -c /home/ubuntu/kaldi-gstreamer-server-master/sample_chinese_nnet3.yam<br></code></pre></td></tr></table></figure><p>该-u ws:&#x2F;&#x2F;localhost:8888&#x2F;worker&#x2F;ws&#x2F;speech参数指定worker应连接到的master server所在的ip地址（本机为localhost）。并且确保worker使用的端口号与master server相同的端口（此处为8888），你可以同时启动任意数量的worker,只需要将上面命令再运行就可以了。<br>启动master server和woeker后就是客户端的使用了，客户端的示例kaldigstserver&#x2F;client.py</p><p>，可以通过调用下面的命令测试安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">python2 kaldigstserver/client.py -r 8192 test/data/chinese_test.wav<br></code></pre></td></tr></table></figure><p>没有问题的话应该会出现识别结果如下<br><img src="/../images/%E5%9F%BA%E4%BA%8Ekaldi-GStreamer%E6%90%AD%E5%BB%BAweb%E7%89%88%E5%AE%9E%E6%97%B6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F/image%20(11).png" alt="image (11)"></p><p>但是我当时出现问题，运行的时候出现错误并返回state1。</p><p>当时是将worker.py中422行代码修改成423行的样子解决的，刚想复现这个问题发现又不报错了，神奇。</p><p><img src="/../images/%E5%9F%BA%E4%BA%8Ekaldi-GStreamer%E6%90%AD%E5%BB%BAweb%E7%89%88%E5%AE%9E%E6%97%B6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F/image%20(12).png" alt="image (12)"></p><h2 id="四-搭建web端实时语音识别系统"><a href="#四-搭建web端实时语音识别系统" class="headerlink" title="四.搭建web端实时语音识别系统"></a>四.搭建web端实时语音识别系统</h2><p>当上述步骤完成后，我们将借助<a href="https://github.com/sendream/dictate.js">dictate.js</a>搭建web端实时语音识别系统。</p><h4 id="1-安装nginx"><a href="#1-安装nginx" class="headerlink" title="1.安装nginx"></a>1.安装nginx</h4><p>apt-get安装nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo apt-get install nginx<br></code></pre></td></tr></table></figure><p>查看nginx是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">nginx -V<br></code></pre></td></tr></table></figure><p>启动nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">service nginx start <br></code></pre></td></tr></table></figure><p>启动后，在浏览器输入ip地址，可以看到nginx的欢迎页面，表示nginx安装成功</p><h4 id="2-申请域名"><a href="#2-申请域名" class="headerlink" title="2.申请域名"></a>2.申请域名</h4><p> 因为dictate.js调用麦克风需要https传输，而使用https传输不能使用ws，而是要使用wss（开始用apache配置wss差点人都去世了，后面转用nginx），配置wss需要域名(网上这么说的)。</p><p>打开xx云，搜索域名，然后购买9块钱一年。因为要备案，我用了个备了案的二级域名。</p><p>申请完域名后绑定服务器ip地址</p><h4 id="3-申请并配置SSL"><a href="#3-申请并配置SSL" class="headerlink" title="3.申请并配置SSL"></a>3.申请并配置SSL</h4><p>打开腾讯云(别的也一样)，搜索ssl,点击“立即选购”，点击”自定义配置“，选择域名型免费版：</p><p><img src="/../images/%E5%9F%BA%E4%BA%8Ekaldi-GStreamer%E6%90%AD%E5%BB%BAweb%E7%89%88%E5%AE%9E%E6%97%B6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F/image%20(13).png" alt="image (13)"></p><p>然后按要求填就是了。</p><p>签发证书后在我的证书下载nginx版，下载完成后上传到服务器。</p><p>后续步骤参考<a href="https://cloud.tencent.com/developer/article/1160294">这里</a></p><h4 id="4-部署dictate-js"><a href="#4-部署dictate-js" class="headerlink" title="4.部署dictate.js"></a>4.部署dictate.js</h4><p><strong>假设你的域名为kfc.zym</strong></p><p>上述步骤完成后，应该可以在浏览器使用<a href="https://kfc.zym域/">https://kfc.zy</a><a href="https://kfc.zym/">m</a>访问了</p><p>将dictate.js解压放在&#x2F;var&#x2F;www&#x2F;html&#x2F;文件夹下</p><p>修改&#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo vim /etc/nginx/sites-enabled/default<br>找到loaction /&#123;&#125;修改成:<br>location / &#123;<br>  root /var/www/html;<br>  index  index.html index.htm /web/;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时通过<a href="https://kfc.zym/web/demos/mob">https://kfc.zym/web/demos/mob</a><a href="https://kfc.zym/web/demos/demo.html">.html</a><br>为了让wss能够传输，应在上述location&#x2F;{}后面添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">location /api/ &#123;# /api/为你代理转换的字符串<br>           proxy_pass http://127.0.0.1:8888/; <br>           #127.0.0.1为master server的ip地址，8888为master server设置的端口号<br>           proxy_http_version 1.1;<br>           proxy_set_header Upgrade $http_upgrade;<br>           proxy_set_header Connection &quot;upgrade&quot;;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这时应该修改mob.html中的wss</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;option value=&quot;wss://abc.zym:443/api/client/ws/speech|wss://abc.zym:443/api/client/ws/status&quot; selected=&quot;selected&quot;&gt;普通话&lt;/option&gt;<br>#abc.zym为你的域名，端口号为443,不能设为8888，/api/为上一步设置的跳转，nginx中是什么这里就是什么<br></code></pre></td></tr></table></figure><h4 id="5-测试web端语音识别系统是否能用"><a href="#5-测试web端语音识别系统是否能用" class="headerlink" title="5.测试web端语音识别系统是否能用"></a>5.测试web端语音识别系统是否能用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo service nginx restart #重启nginx<br>cd ~/kaldi-gstreamer-server-master/<br>python2 kaldigstserver/master_server.py --port=8888<br>python2 kaldigstserver/worker.py -u ws://localhost:8888/worker/ws/speech -c /home/ubuntu/kaldi-gstreamer-server-master/sample_chinese_nnet3.yaml<br></code></pre></td></tr></table></figure><p>在浏览器进入<a href="https://kfc.zym/web/demos/mob.html">https://kfc.zym/web/demos/mob.html</a><br>进行测试，如果能实时识别就说明成功了</p><h4 id="6-自己训练的模型部署"><a href="#6-自己训练的模型部署" class="headerlink" title="6.自己训练的模型部署"></a>6.自己训练的模型部署</h4><p>参考下面文件夹所需配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">kaldi-gstreamer-server-master/test/models/chinese/multi_cn_chain_sp_online<br></code></pre></td></tr></table></figure><p>仿照下面yaml填写自己的yaml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">kaldi-gstreamer-server-master/sample_chinese_nnet3.yaml<br></code></pre></td></tr></table></figure><p>如果只是使用了的mfcc，则没有大的变化<br>但是如果使用了音高则需要在yaml中添加pitch</p><p>以下为我的yaml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs plain"># You have to download multi_cn &quot;online nnet3&quot; chain model in order to use this sample<br># Run download-multi_cn-nnet3.sh in &#x27;test/models&#x27; to download them.<br>use-nnet2: True<br>decoder:<br>    # All the properties nested here correspond to the kaldinnet2onlinedecoder GStreamer plugin properties.<br>    # Use gst-inspect-1.0 ./libgstkaldionline2.so kaldinnet2onlinedecoder to discover the available properties<br>    nnet-mode : 3<br>    use-threaded-decoder:  true<br>    add-pitch: true<br>    model : /home/ubuntu/tibetan_lasha/final.mdl<br>    word-syms : /home/ubuntu/tibetan_lasha/words.txt<br>    fst : /home/ubuntu/tibetan_lasha/HCLG.fst<br>    mfcc-config : /home/ubuntu/tibetan_lasha/conf/mfcc.conf<br>    online-pitch-config: /home/ubuntu/tibetan_lasha/conf/pitch.conf<br>    ivector-extraction-config : /home/ubuntu/tibetan_lasha/conf/ivector_extractor.conf<br>    max-active: 7000<br>    beam: 15.0<br>    lattice-beam: 8.0<br>    acoustic-scale: 0.1<br>    do-endpointing : true<br>    endpoint-silence-phones : &quot;1:2:3:4:5:6:7:8:9:10:11:12:13:14:15&quot;<br>    traceback-period-in-secs: 0.25<br>    chunk-length-in-secs: 0.25<br>    num-nbest: 1<br>out-dir: tmp<br>use-vad: False<br>silence-timeout: 10<br><br># Just a sample post-processor that appends &quot;.&quot; to the hypothesis<br>post-processor: perl -npe &#x27;BEGIN &#123;use IO::Handle; STDOUT-&gt;autoflush(1);&#125; sleep(1); s/(.*)/\1./;&#x27;<br><br>#post-processor: (while read LINE; do echo $LINE; done)<br><br># A sample full post processor that add a confidence score to 1-best hyp and deletes other n-best hyps<br>#full-post-processor: ./sample_full_post_processor.py<br><br>logging:<br>    version : 1<br>    disable_existing_loggers: False<br>    formatters:<br>        simpleFormater:<br>            format: &#x27;%(asctime)s - %(levelname)7s: %(name)10s: %(message)s&#x27;<br>            datefmt: &#x27;%Y-%m-%d %H:%M:%S&#x27;<br>    handlers:<br>        console:<br>            class: logging.StreamHandler<br>            formatter: simpleFormater<br>            level: DEBUG<br>    root:<br>        level: DEBUG<br>        handlers: [console]<br></code></pre></td></tr></table></figure><h2 id="五-展示效果"><a href="#五-展示效果" class="headerlink" title="五.展示效果"></a>五.展示效果</h2><p>已经实现效果展示，可点击<a href="https://csl.cqspclsm.com/nmu/csl/mob_asr.html">这里</a>进行测试</p><p><img src="/../images/%E5%9F%BA%E4%BA%8Ekaldi-GStreamer%E6%90%AD%E5%BB%BAweb%E7%89%88%E5%AE%9E%E6%97%B6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F/image%20(14).png" alt="image (14)"></p><p>感谢“克维斯利姆·德里奥”和”奥雷里亚诺上校”的插图</p>]]></content>
    
    
    <categories>
      
      <category>kaldi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kaldi</tag>
      
      <tag>GStreamer</tag>
      
      <tag>语音识别系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESPnet安装</title>
    <link href="/2022/04/13/ESPnet%E5%AE%89%E8%A3%85/"/>
    <url>/2022/04/13/ESPnet%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="版本：cuda-10-1-pytorch1-4-centos7-8"><a href="#版本：cuda-10-1-pytorch1-4-centos7-8" class="headerlink" title="版本：cuda 10.1 pytorch1.4  centos7.8"></a>版本：cuda 10.1 pytorch1.4  centos7.8</h1><h1 id="0-准备"><a href="#0-准备" class="headerlink" title="0.准备"></a>0.准备</h1><p>需要准备安装好anaconda3，kalid(可以见kaldi安装)</p><h1 id="1-创建虚拟环境并激活"><a href="#1-创建虚拟环境并激活" class="headerlink" title="1.创建虚拟环境并激活"></a>1.创建虚拟环境并激活</h1><p>执行下面命令创建虚拟环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs plain">conda create -n espnet python=3.7.3<br>conda activate espnet<br></code></pre></td></tr></table></figure><p>conda换源，建议换清华的源，阿里的源下载的pytorch和cuda以及cudnn的版本和清华的不同，取决于你的cuda_cudnn的版本，不然会报错<br>pip换源</p><p>参考：<a href="https://blog.csdn.net/zhayushui/article/details/80433768">https://blog.csdn.net/zhayushui/article/details/80433768</a></p><h1 id="2-安装pytorch"><a href="#2-安装pytorch" class="headerlink" title="2.安装pytorch"></a>2.安装pytorch</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">conda install pytorch==1.4.0 torchvision==0.5.0 cudatoolkit=10.1<br></code></pre></td></tr></table></figure><p>上面为例子，需要自己去pytorch找对应版本。pytorch官网：<a href="https://pytorch.org/">https://pytorch.org/</a></p><h1 id="3-克隆espnet"><a href="#3-克隆espnet" class="headerlink" title="3.克隆espnet"></a>3.克隆espnet</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd ~<br>git clone https://github.com/espnet/espnet<br></code></pre></td></tr></table></figure><p>我安装在家目录下，自己视情况决定安装的位置<br>可能github网速挺慢的导致克隆失败，也需要换国内github源</p><h1 id="4-在espnet-x2F-tools下面链接kaldi"><a href="#4-在espnet-x2F-tools下面链接kaldi" class="headerlink" title="4.在espnet&#x2F;tools下面链接kaldi"></a>4.在espnet&#x2F;tools下面链接kaldi</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd espnet/tools<br>ln -s ~/kaldi ./<br></code></pre></td></tr></table></figure><h1 id="5-设置CUDA环境"><a href="#5-设置CUDA环境" class="headerlink" title="5.设置CUDA环境"></a>5.设置CUDA环境</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">. ./setup_cuda_env.sh ~/cuda-10.1<br></code></pre></td></tr></table></figure><p>注意上面的cuda环境是我自己的环境</p><h1 id="6-设置系统python环境"><a href="#6-设置系统python环境" class="headerlink" title="6.设置系统python环境"></a>6.设置系统python环境</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">./setup_python.sh $(command -v python3)<br></code></pre></td></tr></table></figure><h1 id="7-安装"><a href="#7-安装" class="headerlink" title="7.安装"></a>7.安装</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">make<br></code></pre></td></tr></table></figure><h1 id="8-安装warp-ctc"><a href="#8-安装warp-ctc" class="headerlink" title="8.安装warp-ctc"></a>8.安装warp-ctc</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd installers<br>./install_warp-ctc.sh<br></code></pre></td></tr></table></figure><h1 id="9-安装warp-transducer"><a href="#9-安装warp-transducer" class="headerlink" title="9.安装warp-transducer"></a>9.安装warp-transducer</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">./install_warp-transducer.sh<br></code></pre></td></tr></table></figure><p>（非必要安装，可以用的时候再安装）如果出错，把步骤5重新运行一遍。</p><h1 id="10-运行以下yesno"><a href="#10-运行以下yesno" class="headerlink" title="10.运行以下yesno"></a>10.运行以下yesno</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd ~/espnet/egs/yesno/asr1<br>./run<br></code></pre></td></tr></table></figure><p>出现以下结果说明安装正确</p><p><img src="/../images/ESPnet%E5%AE%89%E8%A3%85/image%20(5).png"></p>]]></content>
    
    
    <categories>
      
      <category>espnet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>espnet</tag>
      
      <tag>linux</tag>
      
      <tag>安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>因为德芙的第一篇文章</title>
    <link href="/2022/04/12/hello-world/"/>
    <url>/2022/04/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>嘻嘻嘻嘻，今天是4月12号，夏冬疯狂交替的日子，但是由于目前全国疫情又到处爆发了，大家还是要小心注意。</p><p>这里是我的个人博客，这是我在博客上写的第一篇文章，主要是欢迎各位小伙伴的到来。</p><p>说起来，为什么突然想搞个博客呢，因为就是突然想搞个博客，嘻嘻，以前都是用石墨文档写学习记录给自己看，现在想用博客记录自己的学习记录（主要是自己学习和吸收的一个过程，当然可能会有错误，欢迎大家指正）。但是我还是个在校学生，可能更新频率会低一点，还请见谅。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
